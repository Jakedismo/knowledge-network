import { IntegrationStateSnapshot } from './types'

const now = new Date()
const iso = (date: Date) => date.toISOString()

export const defaultIntegrationState: IntegrationStateSnapshot = {
  integrations: [
    {
      id: 'slack',
      name: 'Slack',
      type: 'oauth2',
      enabled: false,
      status: 'disconnected',
      description: 'Team communication and collaboration platform',
      category: 'collaboration',
      features: ['Real-time messaging', 'File sharing', 'Channel management', 'Notifications'],
      logo: '/integrations/slack.png',
      config: {},
      oauth2Config: {
        clientId: '',
        clientSecret: '',
        authorizationUrl: 'https://slack.com/oauth/v2/authorize',
        tokenUrl: 'https://slack.com/api/oauth.v2.access',
        redirectUri: 'http://localhost:3000/api/integrations/oauth/callback',
        scope: ['chat:write', 'channels:read', 'users:read'],
      },
      requiredScopes: ['chat:write', 'channels:read'],
      optionalScopes: ['files:read', 'files:write', 'users:read.email'],
      docsUrl: 'https://api.slack.com',
      supportUrl: 'https://slack.com/help',
    },
    {
      id: 'github',
      name: 'GitHub',
      type: 'oauth2',
      enabled: true,
      status: 'connected',
      description: 'Code hosting and version control platform',
      category: 'development',
      features: ['Repository management', 'Issue tracking', 'Pull requests', 'CI/CD'],
      logo: '/integrations/github.png',
      config: {
        organization: 'knowledge-network',
        repos: ['knowledge-network', 'docs'],
      },
      oauth2Config: {
        clientId: '',
        clientSecret: '',
        authorizationUrl: 'https://github.com/login/oauth/authorize',
        tokenUrl: 'https://github.com/login/oauth/access_token',
        redirectUri: 'http://localhost:3000/api/integrations/oauth/callback',
        scope: ['repo', 'user'],
      },
      lastSync: iso(new Date(now.getTime() - 1000 * 60 * 45)),
      connectedAt: iso(new Date(now.getTime() - 1000 * 60 * 60 * 24 * 14)),
      usage: { requests: 850, limit: 1000 },
      docsUrl: 'https://docs.github.com/en/rest',
      supportUrl: 'https://support.github.com',
    },
    {
      id: 'jira',
      name: 'Jira',
      type: 'api_key',
      enabled: true,
      status: 'connected',
      description: 'Agile project management and issue tracking',
      category: 'project_management',
      features: ['Sprint planning', 'Issue tracking', 'Roadmaps', 'Reports'],
      logo: '/integrations/jira.png',
      config: {
        domain: 'https://your-domain.atlassian.net',
        email: 'admin@example.com',
        apiToken: '••••••••',
      },
      apiKeyFields: [
        {
          name: 'domain',
          label: 'Jira Domain',
          type: 'url',
          placeholder: 'https://your-domain.atlassian.net',
          required: true,
        },
        {
          name: 'email',
          label: 'Email',
          type: 'text',
          placeholder: 'your-email@example.com',
          required: true,
        },
        {
          name: 'apiToken',
          label: 'API Token',
          type: 'password',
          placeholder: 'Your Jira API token',
          required: true,
        },
      ],
      lastSync: iso(new Date(now.getTime() - 1000 * 60 * 90)),
      connectedAt: iso(new Date(now.getTime() - 1000 * 60 * 60 * 24 * 21)),
      usage: { requests: 320, limit: 500 },
      docsUrl: 'https://developer.atlassian.com/cloud/jira/platform/rest/v3/',
      supportUrl: 'https://support.atlassian.com',
    },
    {
      id: 'google-drive',
      name: 'Google Drive',
      type: 'oauth2',
      enabled: false,
      status: 'disconnected',
      description: 'Cloud storage and file synchronization',
      category: 'storage',
      features: ['File storage', 'Real-time collaboration', 'Version control', 'Sharing'],
      logo: '/integrations/google-drive.png',
      config: {},
      oauth2Config: {
        clientId: '',
        clientSecret: '',
        authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth',
        tokenUrl: 'https://oauth2.googleapis.com/token',
        redirectUri: 'http://localhost:3000/api/integrations/oauth/callback',
        scope: ['https://www.googleapis.com/auth/drive'],
      },
      docsUrl: 'https://developers.google.com/drive/api',
    },
    {
      id: 'teams',
      name: 'Microsoft Teams',
      type: 'oauth2',
      enabled: false,
      status: 'error',
      description: 'Business communication and collaboration',
      category: 'collaboration',
      features: ['Video conferencing', 'Chat', 'File sharing', 'App integration'],
      logo: '/integrations/teams.png',
      config: {},
      oauth2Config: {
        clientId: '',
        clientSecret: '',
        authorizationUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',
        tokenUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',
        redirectUri: 'http://localhost:3000/api/integrations/oauth/callback',
        scope: ['User.Read', 'Chat.ReadWrite'],
      },
      docsUrl: 'https://learn.microsoft.com/en-us/microsoftteams/platform',
      supportUrl: 'https://learn.microsoft.com/en-us/microsoftteams/support-contact-information',
    },
    {
      id: 'mixpanel',
      name: 'Mixpanel',
      type: 'api_key',
      enabled: false,
      status: 'disconnected',
      description: 'Product analytics and user behavior tracking',
      category: 'analytics',
      features: ['Event tracking', 'User analytics', 'Funnels', 'Retention analysis'],
      logo: '/integrations/mixpanel.png',
      config: {},
      apiKeyFields: [
        { name: 'projectId', label: 'Project ID', type: 'text', required: true },
        { name: 'apiSecret', label: 'API Secret', type: 'password', required: true },
      ],
      docsUrl: 'https://developer.mixpanel.com/reference/overview',
      supportUrl: 'https://help.mixpanel.com',
    },
  ],
  webhooks: [
    {
      id: 'wh-1',
      name: 'GitHub sync events',
      integrationId: 'github',
      url: 'https://example.com/webhook/github',
      events: ['push', 'pull_request', 'issues'],
      active: true,
      secret: 'secret-key',
      headers: { 'X-Integration': 'github' },
      retryPolicy: { maxRetries: 3, initialDelay: 1000, backoffMultiplier: 2 },
      createdAt: iso(new Date(now.getTime() - 1000 * 60 * 60 * 12)),
      lastTriggeredAt: iso(new Date(now.getTime() - 1000 * 60 * 30)),
    },
    {
      id: 'wh-2',
      name: 'Jira issue updates',
      integrationId: 'jira',
      url: 'https://example.com/webhook/jira',
      events: ['issue_created', 'issue_updated'],
      active: false,
      headers: { 'X-Integration': 'jira' },
      retryPolicy: { maxRetries: 5, initialDelay: 2000, backoffMultiplier: 2 },
      createdAt: iso(new Date(now.getTime() - 1000 * 60 * 60 * 24 * 5)),
    },
  ],
  deliveries: [
    {
      id: 'd-1',
      webhookId: 'wh-1',
      event: 'push',
      status: 'success',
      attempts: 1,
      timestamp: iso(new Date(now.getTime() - 1000 * 60 * 60)),
      responseCode: 200,
      responseTime: 145,
    },
    {
      id: 'd-2',
      webhookId: 'wh-1',
      event: 'pull_request',
      status: 'failed',
      attempts: 3,
      timestamp: iso(new Date(now.getTime() - 1000 * 60 * 90)),
      responseCode: 500,
      error: 'Internal server error',
    },
    {
      id: 'd-3',
      webhookId: 'wh-2',
      event: 'issue_created',
      status: 'pending',
      attempts: 0,
      timestamp: iso(new Date(now.getTime() - 1000 * 60 * 45)),
    },
  ],
}

export const cloneDefaultIntegrationState = (): IntegrationStateSnapshot =>
  JSON.parse(JSON.stringify(defaultIntegrationState))
